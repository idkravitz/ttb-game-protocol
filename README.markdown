Protocol description
====================
## Types of server response ##
This section describes the responses of server. In general each
response have a status, which resides in _"status"_ field. Only response
with status "ok" means that last query have been processed clearly, any
status, that differs from this, stands for error and his "message" field
describes exactly what bad thing have happened.

#### OK ####
Every successful query will be followed by this response, it have a status field
with value "ok" and all necessary data after it.
    {
        "status": "ok",
        ...
    }
#### Bad Request ####
This is an error response, and have a meaning of syntax error in JSON query parsing.
    {
        "status": "badRequest",
        "message": "<description>",
    }
#### Bad Command ####
    {
        "status": "badCommand",
        "message": "<description>",
    }
#### Internal Error ####
    {
        "status": "internalError",
        "message": "<description>",
    }
#### Bad Password ####
    {
        "status": "badPassword",
        "message": "<description>",
    }
#### Bad Sid ####
    {
        "status": "badSid",
        "message": "<description>",
    }
#### Already Exists ####
    {
        "status": "alreadyExists",
        "message": "<description>"
    }
#### Already in Game ####
    {
        "status": "alreadyInGame",
        "message": "<description>",
    }
#### Not in Game ####
    {
        "status": "notInGame",
        "message": "<description>",
    }
## Registration ##

### Request ######
    {
        "cmd": "register",
        "username": "<username>",
        "password": "<password>"
    }
### Answer ######
    {
        "status": "ok",
        "sid": "<sid>"
    }

## Logout ##

### Request ######
    {
        "cmd": "unregister",
        "sid": "<sid>"
    }
### Answer ######
    {
        "status": "ok"
    }

## Chat ##
### Request ######
    {
        "cmd": "chat",
        "sid": "<sid>",
        "message": "<message>"
    }
### Answer ######
    {
        "status": "ok",
    }

## Getting chat history ##
### Request ######
    {
        "cmd": "getChatHistory",
        "sid": "<sid>"
    }
### Answer ######
    {
        "status": "ok",
        "chat":  [ { "username": "<username>",
                     "message": "<message>",
                     "time": "<UTC>" }, ... ]
    }

## Database cleanup ##
### Request ######
    {
        "cmd": "clear"
    }
### Answer ######
    {
        "status": "ok"
    }

## Getting a list of games ##

### Request ######
    {
        "cmd": "getGamesList",
        "sid": "<sid>"
    }
### Answer ######
    {
        "status": "ok",
        "games": [ {"gameName": "<name of the game>" }, ...  ]
    }

## Getting a list of players ##

### Request ######
    {
        "cmd": "getPlayersList",
        "sid": "<sid>"
    }
### Answer ######
    {
        "status": "ok",
        "players": [ { "username": "<username>" }, ...  ]
    }

## Getting a list of players for the game##

### Request ######
    {
        "cmd": "getPlayersListForGame",
        "sid": "<sid>",
        "gameName": "<name of the game>"
    }
### Answer ######
    {
        "status": "ok",
        "players": [ { "username": "<username>" }, ...  ]
    }

## Setting player status ##

### Request ######
    {
        "cmd": "setPlayerStatus",
        "sid": "<sid>",
        "status": "<status>"
    }
### Answer ######
    {
        "status": "ok"
    }

## Creation of a game ##

### Request ######
    {
        "cmd": "createGame",
        "sid": "<sid>",
        "gameName": "<name of the game>"
    }
### Answer ######
    {
        "status": "ok"
    }

## Join a game ##

### Request ######
    {
        "cmd": "joinGame",
        "sid": "<sid>",
        "gameName": "<name of the game>"
    }
### Answer ######
    {
        "status": "ok"
    }

## Leaving a game ##

### Request ######
    {
        "cmd": "leaveGame",
        "sid": "<sid>",
        "gameName": "<name of the game>"
    }
### Answer ######
    {
        "status": "ok"
    }

Tests format specification
==========================
Each test is a file with .tst extension. The name of a test
must contain only Latin letters, symbol "\_", and digits. In
other words, it must match following regexp */[a-zA-Z0-9\_]+\\.tst/* 

The format of test is a set of JSON requests, separated by
newlines and/or white spaces. Only double quotes are allowed. An answer
to a test must have exactly the same name, but with .ans extension.
The format of an answer is absolutely the same as the format of a test.

Consider the following example:

_goodUsername_\__1.tst_
    {
        "cmd": "register",
        "username": "Vasya_Pupkin",
        "password": "123456"
    }
_goodUsername_\__1.ans_
    {
        "sid": "Vasya_Pupkin123456", 
        "status": "ok"
    }

The previous example also shows another important aspect - the sid-generator.
While running in testing mode, it must return _sid_, that is generated by simple rule:
    sid = username + password

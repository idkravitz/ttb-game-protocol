Protocol description
====================
## Types of server response ##

#### OK ####
    {
        "status": "ok",
        ...
    }
#### Bad Request ####
    {
        "status": "badRequest",
        "message": "<description>",
    }
#### Bad Command ####
    {
        "status": "badCommand",
        "message": "<description>",
    }
#### Internal Error ####
    {
        "status": "internalError",
        "message": "<description>",
    }
## Registration ##

### Request ######
    {
        "cmd": "register",
        "username": "<username>",
        "password": "<password>"
    }
### Answer ######
    {
        "status": "ok",
        "sid": "<sid>"
    }

## Logout ##

### Request ######
    {
        "cmd": "unregister",
        "sid": "<sid>"
    }
### Answer ######
    {
        "status": "ok"
    }

## Chat ##
### Request ######
    {
        "cmd": "chat",
        "sid": "<sid>",
        "message": "<message>"
    }
### Answer ######
    {
        "status": "ok",
        "chat message": "<message>"
    }

## Database cleanup ##
### Request ######
    {
        "cmd": "clear"
    }
### Answer ######
    {
        "status": "ok"
    }

## Getting a list of games ##

### Request ######
    {
        "cmd": "getGamesList",
        "sid": "<sid>"
    }
### Answer ######
    {
        "status": "ok",
        "games": [ { "username": "<username>" }, ...  ]
    }

## Getting a list of players ##

### Request ######
    {
        "cmd": "getPlayersList",
        "sid": "<sid>"
    }
### Answer ######
    {
        "status": "ok",
        "players": [ { "username": "<username>" }, ...  ]
    }

## Getting a list of players for the game##

### Request ######
    {
        "cmd": "getPlayersListForGame",
        "sid": "<sid>"
        "game number": "<number>"
    }
### Answer ######
    {
        "status": "ok",
        "players": [ { "username": "<username>" }, ...  ]
    }

## Getting an archive of messages ##

### Request ######
    {
        "cmd": "getChartList",
        "sid": "<sid>"
    }
### Answer ######
    {
        "status": "ok",
        "chat":  [ { "username": "<username>",
                     "message": "<message>",
                     "time": "<UTC>" }, ... ]
    }

## Setting player status ##

### Request ######
    {
        "cmd": "setPlayerStatus",
        "sid": "<sid>",
        "status": "<status>"
    }
### Answer ######
    {
        "status": "ok"
    }

## Creation of a game ##

### Request ######
    {
        "cmd": "createGame",
        "sid": "<sid>",
        "username": "<username>"
    }
### Answer ######
    {
        "status": "ok"
    }

## Join a game ##

### Request ######
    {
        "cmd": "joinGame",
        "sid": "<sid>",
        "username": "<username>"
    }
### Answer ######
    {
        "status": "ok"
    }

## Leaving a game ##

### Request ######
    {
        "cmd": "leaveGame",
        "sid": "<sid>",
        "username": "<username>"
    }
### Answer ######
    {
        "status": "ok"
    }

Tests format specification
==========================
Each test is a file with .tst extension. The name of a test
must contain only Latin letters, symbol "\_", and digits. In
other words, it must match following regexp */[a-zA-Z0-9\_]+\\.tst/* 

The inner format of test is a set of JSON requests, separated by
newlines and/or white spaces. Only double quotes are allowed. An answer
to a test must have exactly the same name, but with .ans extension.
The inner format of an answer is absolutely the same as the format of a test.

Consider the following example:

_goodUsername_\__1.tst_
    {
        "cmd": "register",
        "username": "Vasya_Pupkin",
        "password": "123456"
    }
_goodUsername_\__1.ans_
    {
        "sid": "Vasya_Pupkin123456", 
        "status": "ok"
    }

The previous example also shows another important aspect - the sid-generator.
While running in testing mode, it must return _sid_, that is generated by simple rule:
    sid = username + password
